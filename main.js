import{initWavesurfer,getWavesurfer,getPlugin,replacePlugin,createSpectrogramPlugin,getCurrentColorMap,initScrollSync}from"./modules/wsManager.js";import{initZoomControls}from"./modules/zoomControl.js";import{initFileLoader,getWavSampleRate}from"./modules/fileLoader.js";import{initBrightnessControl}from"./modules/brightnessControl.js";import{initFrequencyHover}from"./modules/frequencyHover.js";import{cropWavBlob}from"./modules/cropAudio.js";import{drawTimeAxis,drawFrequencyGrid}from"./modules/axisRenderer.js";import{initExportCsv}from"./modules/exportCsv.js";import{initTrashProgram}from"./modules/trashProgram.js";import{initDragDropLoader}from"./modules/dragDropLoader.js";import{initMapPopup}from"./modules/mapPopup.js";import{initSidebar}from"./modules/sidebar.js";import{initTagControl}from"./modules/tagControl.js";import{initDropdown}from"./modules/dropdown.js";import{showMessageBox}from"./modules/messageBox.js";import{initAutoIdPanel}from"./modules/autoIdPanel.js";import{initFreqContextMenu}from"./modules/freqContextMenu.js";import{getCurrentIndex,getFileList,toggleFileIcon,setFileList,clearFileList,getFileIconState,getFileNote,setFileNote,getFileMetadata,setFileMetadata,clearTrashFiles,getTrashFileCount,getCurrentFile}from"./modules/fileState.js";const spectrogramHeight=800;let sidebarControl,fileLoaderControl;const container=document.getElementById("spectrogram-only"),viewer=document.getElementById("viewer-container"),timeAxis=document.getElementById("time-axis"),timeWrapper=document.getElementById("time-axis-wrapper"),timeLabel=document.getElementById("time-label"),freqGrid=document.getElementById("freq-grid"),freqAxisContainer=document.getElementById("freq-axis"),hoverLineElem=document.getElementById("hover-line"),hoverLineVElem=document.getElementById("hover-line-vertical"),progressLineElem=document.getElementById("progress-line"),hoverLabelElem=document.getElementById("hover-label"),zoomControlsElem=document.getElementById("zoom-controls"),playPauseBtn=document.getElementById("playPauseBtn"),stopBtn=document.getElementById("stopBtn");let containerWidth=container.clientWidth,isDraggingProgress=!1,manualSeekTime=null,duration=0,lastLoadedFileName=null,currentFreqMin=10,currentFreqMax=128,currentSampleRate=256e3,selectedSampleRate="auto",currentFftSize=1024,currentWindowType="hann",currentOverlap="auto",currentAudioBufferLength=0,overlapWarningShown=!1,freqHoverControl=null,autoIdControl=null,freqMenuControl=null,demoFetchController=null;const sampleRateBtn=document.getElementById("sampleRateInput"),fftSizeBtn=document.getElementById("fftSizeInput");let selectionExpandMode=!1,expandHistory=[],currentExpandBlob=null;const expandBackBtn=document.getElementById("expandBackBtn"),expandBackCount=document.getElementById("expandBackCount");let ignoreNextPause=!1;const canvasElem=document.getElementById("spectrogram-canvas"),offscreen=canvasElem.transferControlToOffscreen(),specWorker=new Worker("./spectrogramWorker.js",{type:"module"});specWorker.postMessage({type:"init",canvas:offscreen},[offscreen]);const isMobileDevice=/Android|iPhone|iPad|iPod/i.test(navigator.userAgent);function updateExpandBackBtn(){const e=expandHistory.length;expandBackBtn.style.display=e>0?"inline-flex":"none",expandBackCount&&(expandBackCount.textContent=String(e),expandBackCount.style.display=e>0?"flex":"none")}isMobileDevice&&(["toggleSidebarBtn","toggleTagModeBtn","autoIdBtn","exportBtn","mapBtn","setting","spectrogram-settings","drop-overlay","sidebar"].forEach((e=>{const t=document.getElementById(e);t&&t.classList.add("mobile-hidden")})),requestAnimationFrame((()=>{requestAnimationFrame((()=>{alert("SonoRadar is optimized for desktop use. Android devices support viewer functionality only.")}))})));let stopBtnRafId=null;function showStopButton(){null!==stopBtnRafId&&(cancelAnimationFrame(stopBtnRafId),stopBtnRafId=null),stopBtn.style.display="inline-flex",stopBtnRafId=requestAnimationFrame((()=>{stopBtnRafId=null,stopBtn.classList.add("show")}))}function hideStopButton(){null!==stopBtnRafId&&(cancelAnimationFrame(stopBtnRafId),stopBtnRafId=null),stopBtn.classList.remove("show"),stopBtn.addEventListener("transitionend",(function e(){stopBtn.removeEventListener("transitionend",e),stopBtn.classList.contains("show")||(stopBtn.style.display="none")}),{once:!0})}playPauseBtn.disabled=!0,hideStopButton();const getDuration=()=>duration,guanoOutput=document.getElementById("guano-output"),metadataDiv=document.getElementById("Metadata"),fileListElem=document.getElementById("fileList"),metadataToggle=document.getElementById("metadata-toggle");metadataToggle.addEventListener("click",(()=>{const e=metadataDiv.classList.toggle("collapsed");fileListElem.classList.toggle("metadata-collapsed",e),metadataToggle.classList.toggle("fa-caret-down",!e),metadataToggle.classList.toggle("fa-caret-up",e)})),initWavesurfer({container:container,sampleRate:currentSampleRate}),getWavesurfer().on("finish",(()=>{playPauseBtn.innerHTML='<i class="fa-solid fa-play"></i>',playPauseBtn.title="Play (Ctrl + P)",playPauseBtn.classList.remove("playing","paused"),progressLineElem.style.display="none",progressLineElem.style.pointerEvents="none",manualSeekTime=null,ignoreNextPause=!0,hideStopButton()})),getWavesurfer().on("play",(()=>{progressLineElem.style.display="block",progressLineElem.style.pointerEvents="none",playPauseBtn.innerHTML='<i class="fa-solid fa-pause"></i>',playPauseBtn.title="Pause",playPauseBtn.classList.add("playing"),playPauseBtn.classList.remove("paused"),showStopButton()})),getWavesurfer().on("pause",(()=>{ignoreNextPause?ignoreNextPause=!1:(playPauseBtn.innerHTML='<i class="fa-solid fa-play"></i>',playPauseBtn.title="Continue (Ctrl + P)",playPauseBtn.classList.add("paused"),playPauseBtn.classList.remove("playing"),progressLineElem.style.pointerEvents="auto",0===getWavesurfer().getCurrentTime()?hideStopButton():showStopButton())})),getWavesurfer().on("audioprocess",(e=>{updateProgressLine(e)})),getWavesurfer().on("seek",(e=>{updateProgressLine(e*duration)})),document.addEventListener("file-loaded",(()=>{playPauseBtn.innerHTML='<i class="fa-solid fa-play"></i>',playPauseBtn.title="Play (Ctrl + P)",playPauseBtn.classList.remove("playing","paused"),progressLineElem.style.display="none",progressLineElem.style.pointerEvents="none",manualSeekTime=null,playPauseBtn.disabled=!1,hideStopButton(),updateProgressLine(0)})),playPauseBtn.addEventListener("click",(()=>{const e=getWavesurfer();e&&(e.isPlaying()?(e.pause(),playPauseBtn.innerHTML='<i class="fa-solid fa-play"></i>',playPauseBtn.title="Continue (Ctrl + P)",playPauseBtn.classList.add("paused"),playPauseBtn.classList.remove("playing"),progressLineElem.style.pointerEvents="auto"):(null!==manualSeekTime&&(e.setTime(manualSeekTime),manualSeekTime=null),e.play(),playPauseBtn.innerHTML='<i class="fa-solid fa-pause"></i>',playPauseBtn.title="Pause",playPauseBtn.classList.add("playing"),playPauseBtn.classList.remove("paused"),progressLineElem.style.pointerEvents="none"))})),stopBtn.addEventListener("click",(()=>{const e=getWavesurfer();e&&(ignoreNextPause=!0,e.stop(),playPauseBtn.innerHTML='<i class="fa-solid fa-play"></i>',playPauseBtn.title="Play (Ctrl + P)",playPauseBtn.classList.remove("playing","paused"),progressLineElem.style.display="none",progressLineElem.style.pointerEvents="none",manualSeekTime=null,updateProgressLine(0),hideStopButton())}));const overlay=document.getElementById("drop-overlay"),loadingOverlay=document.getElementById("loading-overlay"),uploadOverlay=document.getElementById("upload-overlay");function showDropOverlay(){overlay.style.display="flex",overlay.style.pointerEvents="auto",hoverLineElem.style.display="none",hoverLineVElem.style.display="none",hoverLabelElem.style.display="none",viewer.classList.remove("hide-cursor"),freqHoverControl?.setPersistentLinesEnabled(!1)}function hideDropOverlay(){overlay.style.display="none",overlay.style.pointerEvents="none",freqHoverControl?.hideHover(),freqHoverControl?.setPersistentLinesEnabled(!0),freqHoverControl?.refreshHover(),autoIdControl?.updateMarkers()}showDropOverlay(),document.addEventListener("drop-overlay-show",showDropOverlay),document.addEventListener("drop-overlay-hide",hideDropOverlay),updateSpectrogramSettingsText(),fileLoaderControl=initFileLoader({fileInputId:"fileInput",wavesurfer:getWavesurfer(),spectrogramHeight:spectrogramHeight,colorMap:[],onPluginReplaced:()=>{},onFileLoaded:e=>{hideDropOverlay(),zoomControlsElem.style.display="flex",sidebarControl.refresh(e.name)},onBeforeLoad:()=>{demoFetchController&&(demoFetchController.abort(),demoFetchController=null),"flex"!==uploadOverlay.style.display&&(loadingOverlay.style.display="flex"),freqHoverControl?.hideHover(),freqHoverControl?.clearSelections(),document.body.classList.contains("autoid-open")&&freqHoverControl?.setPersistentLinesEnabled(!1),selectionExpandMode&&(selectionExpandMode=!1,sampleRateBtn.disabled=!1,expandHistory=[],currentExpandBlob=null,updateExpandBackBtn())},onAfterLoad:()=>{"flex"!==uploadOverlay.style.display&&(loadingOverlay.style.display="none"),freqHoverControl?.refreshHover(),autoIdControl?.updateMarkers(),drawColorBar(getCurrentColorMap()),updateSpectrogramSettingsText()},onSampleRateDetected:autoSetSampleRate}),sidebarControl=initSidebar({onFileSelected:e=>{fileLoaderControl.loadFileAtIndex(e),hideDropOverlay()}});const sidebarElem=document.getElementById("sidebar");sidebarElem.addEventListener("sidebar-toggle",(()=>{setTimeout((()=>{const e=containerWidth;zoomControl.applyZoom(),container.clientWidth!==e&&(containerWidth=container.clientWidth,renderAxes(),freqHoverControl?.refreshHover(),autoIdControl?.updateMarkers())}),310)}));const tagControl=initTagControl();(async()=>{demoFetchController=new AbortController;try{const e=await fetch("https://raw.githubusercontent.com/hkbatradar/SonoRadar/main/recording/demo_recording.wav",{signal:demoFetchController.signal}),t=await e.blob();if(demoFetchController.signal.aborted)return;const r=new File([t],"demo_recording.wav",{type:"audio/wav"});setFileList([r],-1),toggleFileIcon(0,"trash"),toggleFileIcon(0,"star"),toggleFileIcon(0,"question"),sidebarControl.refresh(r.name)}catch(e){"AbortError"!==e.name&&console.error("Failed to preload demo file",e)}finally{demoFetchController=null}})(),document.addEventListener("keydown",(e=>{const t=getCurrentIndex();t<0||("Delete"===e.key?(toggleFileIcon(t,"trash"),sidebarControl.refresh(getFileList()[t].name,!1)):"*"===e.key?(toggleFileIcon(t,"star"),sidebarControl.refresh(getFileList()[t].name,!1)):"?"===e.key&&(toggleFileIcon(t,"question"),sidebarControl.refresh(getFileList()[t].name,!1)))}));const toggleGridSwitch=document.getElementById("toggleGridSwitch");async function applySampleRate(e,t=!0){const r=currentSampleRate;currentSampleRate=e;const n=currentSampleRate/2e3;freqMaxInput.max=n,freqMinInput.max=n;if(("auto"!==selectedSampleRate&&e<r||parseFloat(freqMaxInput.value)>n)&&(freqMaxInput.value=n),parseFloat(freqMinInput.value)>n&&(freqMinInput.value=n),currentFreqMax=parseFloat(freqMaxInput.value),currentFreqMin=parseFloat(freqMinInput.value),getWavesurfer()&&(getWavesurfer().options.sampleRate=currentSampleRate,t)){const e=getCurrentIndex();e>=0&&await fileLoaderControl.loadFileAtIndex(e)}freqHoverControl?.hideHover(),replacePlugin(getCurrentColorMap(),spectrogramHeight,currentFreqMin,currentFreqMax,getOverlapPercent(),(()=>{duration=getWavesurfer().getDuration(),zoomControl.applyZoom(),renderAxes(),freqHoverControl?.refreshHover(),autoIdControl?.updateMarkers(),updateSpectrogramSettingsText()}))}async function handleSampleRate(e){if(selectedSampleRate=e,"auto"!==e)await applySampleRate(e);else{const e=getCurrentFile();if(e){const t=await getWavSampleRate(e);await autoSetSampleRate(t)}else updateSpectrogramSettingsText()}}async function autoSetSampleRate(e,t=!1){"auto"===selectedSampleRate&&e?await applySampleRate(e,!t):"auto"===selectedSampleRate&&updateSpectrogramSettingsText()}freqGrid.style.display="none",toggleGridSwitch.checked=!1,toggleGridSwitch.addEventListener("change",(()=>{freqGrid.style.display=toggleGridSwitch.checked?"block":"none"}));const renderAxes=()=>{containerWidth=container.clientWidth,drawTimeAxis({containerWidth:containerWidth,duration:duration,zoomLevel:zoomControl.getZoomLevel(),axisElement:timeAxis,labelElement:timeLabel}),drawFrequencyGrid({gridCanvas:freqGrid,labelContainer:freqAxisContainer,containerElement:container,spectrogramHeight:spectrogramHeight,maxFrequency:currentFreqMax-currentFreqMin,offsetKHz:currentFreqMin}),freqHoverControl?(freqHoverControl.setFrequencyRange(currentFreqMin,currentFreqMax),autoIdControl?.updateMarkers()):freqHoverControl=initFrequencyHover({viewerId:"viewer-container",wrapperId:"viewer-wrapper",hoverLineId:"hover-line",hoverLineVId:"hover-line-vertical",freqLabelId:"hover-label",spectrogramHeight:spectrogramHeight,spectrogramWidth:containerWidth,maxFrequency:currentFreqMax,minFrequency:currentFreqMin,totalDuration:duration,getZoomLevel:()=>zoomControl.getZoomLevel(),getDuration:()=>duration}),updateProgressLine(getWavesurfer().getCurrentTime())},wrapper=document.getElementById("viewer-wrapper"),zoomControl=initZoomControls(getWavesurfer(),container,getDuration,renderAxes,wrapper,(()=>{freqHoverControl?.hideHover()}),(()=>{freqHoverControl?.refreshHover(),autoIdControl?.updateMarkers(),updateSpectrogramSettingsText()}),(()=>selectionExpandMode),(()=>{const e=freqHoverControl?.getHoveredSelection?.();return!!e&&(viewer.dispatchEvent(new CustomEvent("expand-selection",{detail:{startTime:e.data.startTime,endTime:e.data.endTime}})),!0)}));function updateProgressLine(e){if(isDraggingProgress)return;const t=(null===manualSeekTime||getWavesurfer().isPlaying()?e:manualSeekTime)*zoomControl.getZoomLevel()-viewer.scrollLeft;progressLineElem.style.left=`${t}px`}viewer.addEventListener("scroll",(()=>{const e=getWavesurfer();e&&(updateProgressLine(e.getCurrentTime()),autoIdControl?.updateMarkers())})),progressLineElem.addEventListener("mousedown",(e=>{const t=getWavesurfer();t&&!t.isPlaying()&&(isDraggingProgress=!0,e.preventDefault())})),viewer.addEventListener("mousemove",(e=>{if(!isDraggingProgress)return;const t=viewer.getBoundingClientRect();let r=e.clientX-t.left;r=Math.max(0,Math.min(t.width,r)),manualSeekTime=Math.max(0,Math.min(duration,(r+viewer.scrollLeft)/zoomControl.getZoomLevel())),progressLineElem.style.left=`${r}px`})),document.addEventListener("mouseup",(()=>{isDraggingProgress&&(isDraggingProgress=!1)})),viewer.addEventListener("expand-selection",(async e=>{const{startTime:t,endTime:r}=e.detail;if(r>t){freqHoverControl?.hideHover();const e=currentExpandBlob||getCurrentFile(),n=await cropWavBlob(e,t,r);n&&(expandHistory.push({src:e,freqMin:currentFreqMin,freqMax:currentFreqMax}),await getWavesurfer().loadBlob(n),currentExpandBlob=n,selectionExpandMode=!0,zoomControl.setZoomLevel(0),sampleRateBtn.disabled=!0,renderAxes(),freqHoverControl?.hideHover(),freqHoverControl?.clearSelections(),updateExpandBackBtn(),autoIdControl?.reset(),updateSpectrogramSettingsText())}})),viewer.addEventListener("fit-window-selection",(async e=>{const{startTime:t,endTime:r,Flow:n,Fhigh:o}=e.detail;if(r>t){freqHoverControl?.hideHover();const e=currentExpandBlob||getCurrentFile(),a=await cropWavBlob(e,t,r);a&&(expandHistory.push({src:e,freqMin:currentFreqMin,freqMax:currentFreqMax}),await getWavesurfer().loadBlob(a),currentExpandBlob=a,selectionExpandMode=!0,zoomControl.setZoomLevel(0),sampleRateBtn.disabled=!0,freqMinInput.value=formatFreqValue(n),freqMaxInput.value=formatFreqValue(o),updateFrequencyRange(n,o),freqHoverControl?.hideHover(),freqHoverControl?.clearSelections(),updateExpandBackBtn(),autoIdControl?.reset(),updateSpectrogramSettingsText())}})),initBrightnessControl({brightnessSliderId:"brightnessSlider",gainSliderId:"gainSlider",contrastSliderId:"contrastSlider",brightnessValId:"brightnessVal",gainValId:"gainVal",contrastValId:"contrastVal",resetBtnId:"resetButton",onColorMapUpdated:e=>{freqHoverControl?.hideHover(),replacePlugin(e,spectrogramHeight,currentFreqMin,currentFreqMax,getOverlapPercent(),(()=>{duration=getWavesurfer().getDuration(),zoomControl.applyZoom(),renderAxes(),freqHoverControl?.refreshHover(),autoIdControl?.updateMarkers(),updateSpectrogramSettingsText()})),drawColorBar(e)}}),initDragDropLoader({targetElementId:"viewer-wrapper",wavesurfer:getWavesurfer(),spectrogramHeight:spectrogramHeight,colorMap:[],onPluginReplaced:()=>{},onFileLoaded:e=>{hideDropOverlay(),zoomControlsElem.style.display="flex",sidebarControl.refresh(e.name)},onBeforeLoad:()=>{"flex"!==uploadOverlay.style.display&&(loadingOverlay.style.display="flex"),document.body.classList.contains("autoid-open")&&freqHoverControl?.setPersistentLinesEnabled(!1),freqHoverControl?.hideHover(),freqHoverControl?.clearSelections()},onAfterLoad:()=>{"flex"!==uploadOverlay.style.display&&(loadingOverlay.style.display="none"),freqHoverControl?.refreshHover(),autoIdControl?.updateMarkers(),drawColorBar(getCurrentColorMap()),updateSpectrogramSettingsText()},onSampleRateDetected:autoSetSampleRate}),initScrollSync({scrollSourceId:"viewer-container",scrollTargetId:"time-axis-wrapper"}),getWavesurfer().on("ready",(()=>{duration=getWavesurfer().getDuration(),zoomControl.setZoomLevel(0),progressLineElem.style.display="none",updateProgressLine(0),getPlugin()?.render(),requestAnimationFrame((()=>{renderAxes(),freqHoverControl?.refreshHover(),autoIdControl?.updateMarkers(),updateSpectrogramSettingsText()}))})),getWavesurfer().on("decode",(()=>{duration=getWavesurfer().getDuration(),zoomControl.setZoomLevel(0),progressLineElem.style.display="none",updateProgressLine(0),renderAxes(),freqHoverControl?.refreshHover(),autoIdControl?.updateMarkers(),updateSpectrogramSettingsText()})),document.body.addEventListener("touchstart",(()=>{"suspended"===getWavesurfer()?.backend?.ac?.state&&getWavesurfer().backend.ac.resume()}),{once:!0});const freqMinInput=document.getElementById("freqMinInput"),freqMaxInput=document.getElementById("freqMaxInput"),applyFreqRangeBtn=document.getElementById("applyFreqRangeBtn");freqMaxInput.max=currentSampleRate/2e3,freqMinInput.max=freqMaxInput.max;const sampleRateDropdown=initDropdown("sampleRateInput",[{label:"Auto",value:"auto"},{label:"96",value:96e3},{label:"192",value:192e3},{label:"256",value:256e3},{label:"384",value:384e3},{label:"500",value:5e5}],{onChange:e=>handleSampleRate(e.value)});sampleRateDropdown.select(0);const fftSizeDropdown=initDropdown("fftSizeInput",[{label:"512",value:512},{label:"1024",value:1024},{label:"2048",value:2048}],{onChange:e=>handleFftSize(e.value)});fftSizeDropdown.select(1);const windowTypeDropdown=initDropdown("windowTypeInput",[{label:"Blackman",value:"blackman"},{label:"Gauss",value:"gauss"},{label:"Hamming",value:"hamming"},{label:"Hann",value:"hann"},{label:"Rectangular",value:"rectangular"},{label:"Triangular",value:"triangular"}],{onChange:e=>handleWindowType(e.value)});windowTypeDropdown.select(3);const overlapInput=document.getElementById("overlapInput");overlapInput.value="",overlapInput.addEventListener("change",(()=>{const e=overlapInput.value.trim();if(""===e)return currentOverlap="auto",void handleOverlapChange();const t=parseInt(e,10);if(!isNaN(t)&&t>=1&&t<=99){const e=()=>{currentOverlap=t,handleOverlapChange()};if(t>=80&&!overlapWarningShown)return void showMessageBox({title:"Reminder",message:"Using an overlap size above 80% can significantly increase rendering time. If the .wav file is longer than 8 seconds or high-level zoom-in is enabled, large overlap sizes are not recommended.",confirmText:"OK",cancelText:"Cancel",onConfirm:()=>{overlapWarningShown=!0,e()},onCancel:()=>{overlapInput.value="",currentOverlap="auto"}});e()}else alert("Overlap must be between 1 and 99."),overlapInput.value="",currentOverlap="auto",handleOverlapChange()}));const quickPresetBtn=document.getElementById("quickPresetBtn");let quickPresetActive=!1,prevSampleRateIndex=null,prevFftSizeIndex=null;function updateSpectrogramSettingsText(){const e=document.getElementById("spectrogram-settings-text"),t=currentSampleRate,r=currentFftSize,n="auto"===currentOverlap?getAutoOverlapPercent():getOverlapPercent(),o=currentWindowType.charAt(0).toUpperCase()+currentWindowType.slice(1),a="auto"===currentOverlap?"Auto"+(null!==n?` (${n}%)`:""):`${n}%`;e&&(e.textContent=`Sampling rate: ${t/1e3}kHz, FFT size: ${r}, Overlap size: ${a}, ${o} window`)}function drawColorBar(e){const t=document.getElementById("color-bar");if(!t)return;const r=t.getContext("2d"),n=t.width,o=t.height,a=n/e.length;for(let t=0;t<e.length;t++){const[n,l,i,s]=e[t];r.fillStyle=`rgba(${Math.round(255*n)}, ${Math.round(255*l)}, ${Math.round(255*i)}, ${s})`,r.fillRect(t*a,0,a,o)}}function getOverlapPercent(){if("auto"===currentOverlap)return null;const e=parseInt(currentOverlap,10);return isNaN(e)?null:e}function getAutoOverlapPercent(){const e=currentAudioBufferLength||getWavesurfer()?.backend?.buffer?.length,t=document.querySelector("#spectrogram-only canvas")?.width||container.clientWidth,r=currentFftSize;if(e&&t&&r){const n=e/t,o=Math.max(0,Math.round(r-n));return Math.round(o/r*100)}return null}function formatFreqValue(e){return Math.abs(e-Math.round(e))<.001?String(Math.round(e)):e.toFixed(1)}function handleFftSize(e){currentFftSize=e;const t=getCurrentColorMap();freqHoverControl?.hideHover(),replacePlugin(t,spectrogramHeight,currentFreqMin,currentFreqMax,getOverlapPercent(),(()=>{duration=getWavesurfer().getDuration(),zoomControl.applyZoom(),renderAxes(),freqHoverControl?.refreshHover(),autoIdControl?.updateMarkers(),updateSpectrogramSettingsText()}),currentFftSize,currentWindowType)}function handleWindowType(e){currentWindowType=e;const t=getCurrentColorMap();freqHoverControl?.hideHover(),replacePlugin(t,spectrogramHeight,currentFreqMin,currentFreqMax,getOverlapPercent(),(()=>{duration=getWavesurfer().getDuration(),zoomControl.applyZoom(),renderAxes(),freqHoverControl?.refreshHover(),autoIdControl?.updateMarkers(),updateSpectrogramSettingsText()}),currentFftSize,currentWindowType)}function handleOverlapChange(){const e=getCurrentColorMap();freqHoverControl?.hideHover(),replacePlugin(e,spectrogramHeight,currentFreqMin,currentFreqMax,getOverlapPercent(),(()=>{freqHoverControl?.refreshHover(),autoIdControl?.updateMarkers(),duration=getWavesurfer().getDuration(),zoomControl.applyZoom(),renderAxes(),updateSpectrogramSettingsText()}))}function updateFrequencyRange(e,t){const r=getCurrentColorMap();currentFreqMin=e,currentFreqMax=t,freqHoverControl?.hideHover(),replacePlugin(r,spectrogramHeight,e,t,getOverlapPercent(),(()=>{freqHoverControl?.refreshHover(),autoIdControl?.updateMarkers(),duration=getWavesurfer().getDuration(),zoomControl.applyZoom(),renderAxes(),freqHoverControl&&(freqHoverControl.setFrequencyRange(currentFreqMin,currentFreqMax),autoIdControl?.updateMarkers()),updateSpectrogramSettingsText()}))}quickPresetBtn.addEventListener("click",(()=>{quickPresetActive?(sampleRateBtn.disabled=!1,fftSizeBtn.disabled=!1,null!=prevFftSizeIndex&&fftSizeDropdown.select(prevFftSizeIndex),null!=prevSampleRateIndex&&sampleRateDropdown.select(prevSampleRateIndex),quickPresetBtn.style.color="",quickPresetBtn.style.textShadow="",quickPresetBtn.title="Quick Screening Mode",quickPresetActive=!1):(prevSampleRateIndex=sampleRateDropdown.selectedIndex,prevFftSizeIndex=fftSizeDropdown.selectedIndex,fftSizeDropdown.select(0),fftSizeBtn.disabled=!0,sampleRateDropdown.select(3),sampleRateBtn.disabled=!0,quickPresetBtn.style.color="rgb(249, 191, 0)",quickPresetBtn.title="Exit Quick Screening Mode",quickPresetActive=!0),overlapInput.value="",currentOverlap="auto",handleOverlapChange()})),applyFreqRangeBtn.addEventListener("click",(()=>{const e=Math.max(0,parseFloat(freqMinInput.value)),t=currentSampleRate/2e3,r=Math.min(t,parseFloat(freqMaxInput.value));isNaN(e)||isNaN(r)||e>=r?alert("Please enter valid frequency values. Min must be less than Max."):updateFrequencyRange(e,r)})),document.getElementById("fileInputBtn").addEventListener("click",(()=>{document.getElementById("fileInput").click()}));const clearAllBtn=document.getElementById("clearAllBtn");clearAllBtn.addEventListener("click",(()=>{clearFileList(),sidebarControl.refresh(""),replacePlugin(getCurrentColorMap(),spectrogramHeight,currentFreqMin,currentFreqMax,getOverlapPercent(),(()=>{updateSpectrogramSettingsText()})),showDropOverlay(),loadingOverlay.style.display="none",zoomControlsElem.style.display="none",guanoOutput.textContent="(no file selected)",tagControl.updateTagButtonStates(),document.dispatchEvent(new Event("file-list-cleared"))}));const clearTrashBtn=document.getElementById("clearTrashBtn");clearTrashBtn.addEventListener("click",(()=>{const e=getTrashFileCount();0!==e&&showMessageBox({title:"Message",message:`Confirm to clear ${e} trash flagged file(s) from the list?`,confirmText:"Confirm",cancelText:"Cancel",onConfirm:()=>{const e=getCurrentIndex(),t=getFileList();let r=null;if(e>=0&&getFileIconState(e).trash){for(let n=e+1;n<t.length;n++)if(!getFileIconState(n).trash){r=t[n];break}if(!r)for(let n=e-1;n>=0;n--)if(!getFileIconState(n).trash){r=t[n];break}}if(clearTrashFiles()>0){const e=getFileList();if(0===e.length)sidebarControl.refresh(""),replacePlugin(getCurrentColorMap(),spectrogramHeight,currentFreqMin,currentFreqMax,getOverlapPercent(),(()=>{updateSpectrogramSettingsText()})),showDropOverlay(),loadingOverlay.style.display="none",zoomControlsElem.style.display="none",guanoOutput.textContent="(no file selected)";else{let t="";if(r)t=r.name;else{const e=getCurrentFile();t=e?e.name:""}if(sidebarControl.refresh(t),r){const t=e.findIndex((e=>e===r));t>=0&&fileLoaderControl.loadFileAtIndex(t)}}tagControl.updateTagButtonStates(),document.dispatchEvent(new Event("file-list-changed"))}}})}));const settingBtn=document.getElementById("setting"),toolBar=document.getElementById("tool-bar");settingBtn.addEventListener("click",(()=>{const e=toolBar.classList.toggle("open");document.body.classList.toggle("settings-open",e)})),initExportCsv(),initTrashProgram(),initMapPopup(),autoIdControl=initAutoIdPanel({spectrogramHeight:spectrogramHeight,getDuration:getDuration,getFreqRange:()=>({min:currentFreqMin,max:currentFreqMax}),hideHover:()=>freqHoverControl?.hideHover(),refreshHover:()=>freqHoverControl?.refreshHover()}),freqMenuControl=initFreqContextMenu({viewerId:"viewer-container",wrapperId:"viewer-wrapper",containerId:"spectrogram-only",spectrogramHeight:spectrogramHeight,getDuration:getDuration,getFreqRange:()=>({min:currentFreqMin,max:currentFreqMax}),autoId:autoIdControl}),document.addEventListener("autoid-open",(()=>{freqHoverControl?.setPersistentLinesEnabled(!1)})),document.addEventListener("autoid-close",(()=>{freqHoverControl?.setPersistentLinesEnabled(!0),freqMenuControl?.hide()})),document.addEventListener("hide-spectrogram-hover",(()=>{freqHoverControl?.hideHover()})),document.addEventListener("keydown",(e=>{if(e.ctrlKey&&"INPUT"!==e.target.tagName&&"TEXTAREA"!==e.target.tagName&&!e.target.isContentEditable)switch(e.key.toLowerCase()){case"m":e.preventDefault(),document.getElementById("mapBtn")?.click();break;case"s":e.preventDefault(),settingBtn.click();break;case"p":e.preventDefault(),playPauseBtn.click();break;case"i":e.preventDefault(),document.getElementById("autoIdBtn")?.click()}})),document.addEventListener("map-file-selected",(e=>{const t=e.detail?.index;"number"==typeof t&&fileLoaderControl.loadFileAtIndex(t)})),expandBackBtn.addEventListener("click",(async()=>{if(0===expandHistory.length)return;const e=1===expandHistory.length,t=expandHistory.pop(),r=t.src,n=t.freqMin,o=t.freqMax;r&&void 0!==r.name?e?(await getWavesurfer().loadBlob(r),duration=getWavesurfer().getDuration(),currentExpandBlob=null,selectionExpandMode=!1,sampleRateBtn.disabled=!1,zoomControl.setZoomLevel(0),renderAxes(),freqHoverControl?.clearSelections(),expandHistory=[]):(currentExpandBlob=null,await fileLoaderControl.loadFileAtIndex(getCurrentIndex())):r&&(await getWavesurfer().loadBlob(r),currentExpandBlob=r,selectionExpandMode=!0,zoomControl.setZoomLevel(0),sampleRateBtn.disabled=!0,renderAxes(),freqHoverControl?.clearSelections()),freqMinInput.value=formatFreqValue(n),freqMaxInput.value=formatFreqValue(o),updateFrequencyRange(n,o),updateExpandBackBtn(),autoIdControl?.reset(),updateSpectrogramSettingsText()})),document.addEventListener("keydown",(e=>{"Backspace"===e.key&&expandHistory.length>0&&"INPUT"!==e.target.tagName&&"TEXTAREA"!==e.target.tagName&&!e.target.isContentEditable&&(e.preventDefault(),expandBackBtn.click())})),document.addEventListener("file-loaded",(async()=>{const e=getCurrentFile();if(duration=getWavesurfer().getDuration(),zoomControl.setZoomLevel(0),playPauseBtn.classList.remove("playing","paused"),progressLineElem.style.display="none",progressLineElem.style.pointerEvents="none",manualSeekTime=null,playPauseBtn.disabled=!1,hideStopButton(),updateProgressLine(0),lastLoadedFileName=e?e.name:null,selectionExpandMode=!1,sampleRateBtn.disabled=!!quickPresetActive,fftSizeBtn.disabled=!!quickPresetActive,expandHistory=[],currentExpandBlob=null,updateExpandBackBtn(),autoIdControl?.reset(),e){const t=await e.arrayBuffer(),r=new(window.AudioContext||window.webkitAudioContext),n=await r.decodeAudioData(t.slice(0));currentAudioBufferLength=n.length;const o="auto"===currentOverlap?getAutoOverlapPercent():getOverlapPercent();specWorker.postMessage({type:"render",buffer:n.getChannelData(0),sampleRate:n.sampleRate,fftSize:currentFftSize,overlap:o},[n.getChannelData(0).buffer]),updateSpectrogramSettingsText()}})),document.addEventListener("file-list-cleared",(()=>{selectionExpandMode=!1,sampleRateBtn.disabled=!!quickPresetActive,fftSizeBtn.disabled=!!quickPresetActive,expandHistory=[],currentExpandBlob=null,updateExpandBackBtn(),currentAudioBufferLength=0,playPauseBtn.disabled=!0,hideStopButton(),updateSpectrogramSettingsText()})),window.addEventListener("resize",(()=>{zoomControl.applyZoom(),container.clientWidth!==containerWidth&&(containerWidth=container.clientWidth,renderAxes(),freqHoverControl?.refreshHover(),autoIdControl?.updateMarkers())}));